[
    {
        "id": 1,
        "name": "React",
        "description": {
            "lv": "React ir bezmaksas un atvērtā pirmkoda Frontend JavaScript bibliotēka, kas paredzēta lietotāja saskarņu veidošanai, balstoties uz komponentēm. To uztur Meta (iepriekš Facebook) un individuālu izstrādātāju un uzņēmumu kopiena. React var izmantot vienas lapas, mobilo vai servera renderēto lietojumprogrammu izstrādei, izmantojot tādus ietvarus kā Next.js. Tā kā React ir koncentrēts tikai uz lietotāja saskarni un komponentu renderēšanu DOM, React lietojumprogrammas bieži paļaujas uz bibliotēkām maršrutēšanai un citu klienta puses funkcionalitātei",
            "en": "React is a free and open-source front-end JavaScript library for building user interfaces based on components. It is maintained by Meta (formerly Facebook) and a community of individual developers and companies.  React can be used to develop single-page, mobile, or server-rendered applications with frameworks like Next.js. Because React is only concerned with the user interface and rendering components to the DOM, React applications often rely on libraries for routing and other client-side functionality",
            "ru": "React — это бесплатная и открытая библиотека JavaScript для создания пользовательских интерфейсов на основе компонентов. Она поддерживается Meta (ранее Facebook) и сообществом индивидуальных разработчиков и компаний. React можно использовать для разработки одностраничных, мобильных или серверных приложений с использованием таких фреймворков, как Next.js. Поскольку React занимается только пользовательским интерфейсом и рендерингом компонентов в DOM, приложения на React часто полагаются на библиотеки для маршрутизации и других функций на стороне клиента"
        },
        "url": "react",
        "image": "/react.png",
        "type": "Frontend",
        "personal_experience": {
            "lv": "Es sāku mācīties React 2019. gadā. Tā bija pirmā lielā JavaScript bibliotēka, kurā es iedziļinājos. Kopš tā laika es regulāri lietoju React gan darbā, gan personīgajos projektos. Manā pašreizējā darbavietā mēs izmantojam šo bibliotēku gandrīz visos mūsu projektos, kā galveno frontend bibliotēku, kā logrīku bibliotēku Drupal vai kopā ar Next.js. Varu teikt ar pārliecību, ka tā ir mana iecienītākā frontend tehnoloģija, un es ar nepacietību gaidu tās attīstību nākotnē.",
            "en": "I started studying React in 2019. This was first big Javascript library, that I got into. Since that time, I started regulary using React both in work and in my personal projets. At my currenty workplace we use this library in almost all of our projects, as main frontend library, as widget library in Drupal or together with Next JS. I can say with confidence, that this is my favourite frontend technology, and I am looking forward into it`s development in future.",
            "ru": "Я начал изучать React в 2019 году. Это была первая крупная JavaScript-библиотека, с которой я познакомился. С тех пор я регулярно использую React как в работе, так и в личных проектах. В моей текущей компании мы используем эту библиотеку почти во всех наших проектах: как основную frontend-библиотеку, как библиотеку виджетов в Drupal или вместе с Next.js. Могу с уверенностью сказать, что это моя любимая frontend-технология, и я с нетерпением жду её развития в будущем."
        }
    },
    {
        "id": 2,
        "name": "Next JS",
        "description": {
            "lv": "Next.js ir atvērtā pirmkoda tīmekļa izstrādes ietvars, kuru izveidojusi privāta kompānija Vercel, nodrošinot React balstītu tīmekļa lietotņu izstrādi ar servera puses renderēšanu un statiskas mājaslapas ģenerēšanu. React dokumentācijā Next.js tiek minēts kā viens no 'Ieteicamajiem rīkiem', iesakot to izstrādātājiem, kad tiek veidota servera puses mājaslapa, izmantojot Node.js. Tradicionālās React lietotnes var renderēt savu saturu tikai klienta puses pārlūkā, bet Next.js paplašina šo funkcionalitāti, iekļaujot lietotnes, kuras tiek renderētas arī servera pusē.",
            "en": "Next.js is an open-source web development framework created by the private company Vercel providing React-based web applications with server-side rendering and static website generation. React documentation mentions Next.js among 'Recommended Toolchains' advising it to developers when 'building a server-rendered website with Node.js'. Where traditional React apps can only render their content in the client-side browser, Next.js extends this functionality to include applications rendered on the server-side.",
            "ru": "Next.js — это фреймворк для веб-разработки с открытым исходным кодом, созданный компанией Vercel, который обеспечивает разработку веб-приложений на основе React с серверным рендерингом и генерацией статических сайтов. В документации по React Next.js упоминается среди «Рекомендуемых инструментов», предлагая его разработчикам при создании серверных веб-сайтов с использованием Node.js. В то время как традиционные React приложения могут отображать свой контент только в браузере на стороне клиента, Next.js расширяет эту функциональность, включая приложения, которые рендерятся на стороне сервера."
        },
        "url": "next",
        "image": "/next.webp",
        "type": "Frontend",
        "personal_experience": {
            "lv": "Pēdējā gada laikā mana ceļojuma pieredze ar Next.js ir bijusi nekas cits kā aizraujoša. Viss sākās, kad es nolēmu iekļaut šo izcilo rāmi svarīgā projektā – LDZ projektā. No brīža, kad es iedziļinājos Next.js, es biju aizrāvies ar tā daudzpusību un efektivitāti. Vienmērīga servera puses renderēšana, maršrutēšana un React rāmja integrācija sniedza spēcīgu rīku komplektu, kas ļāva man piedāvāt izcilu lietotāja pieredzi LDZ projektā. Atskatoties uz savu gadu ilgo pieredzi ar Next.js, es ar nepacietību skatos uz nākotnes iespējām to izmantot. Tā nepārtraukta attīstība un apņemšanās palikt priekšplānā tīmekļa izstrādes tendencēs mani pārliecinājuši, ka Next.js turpinās būt galvenais instruments manā rīku komplektā. Pašlaik es aktīvi izpētu jaunāko versiju – Next.js 13, sekot tās uzlabojumiem un inovācijām. Mācīšanās un pielāgošanās ceļojums nekad nebeidzas, un tieši tas ir tas, kas mani aizrauj un iepriecina par iespējām, ko Next.js piedāvā. Jāatzīmē, ka pat šī vietne, kurā jūs šobrīd atrodaties, ir izveidota, izmantojot Next.js. Tas ir apliecinājums uzticībai un pārliecībai, ko esmu ieguldījis šajā tehnoloģijā. Turpinot izpētīt un paplašināt Next.js iespējas, esmu aizrautīgs par potenciālu, ko tā piedāvā tīmekļa izstrādes nākotnes veidošanā.",
            "en": "Over the past year, my journey with Next.js has been nothing short of exhilarating. It all began when I decided to incorporate this remarkable framework into a crucial project – the LDZ project. From the moment I delved into Next.js, I was captivated by its versatility and efficiency. The seamless integration of server-side rendering, routing, and the React framework provided a powerful toolkit that enabled me to deliver an exceptional user experience for the LDZ project. As I reflect on my year-long experience with Next.js, I find myself eagerly looking forward to utilizing it in future endeavors. Its continuous evolution and commitment to staying at the forefront of web development trends have convinced me that Next.js will remain a key player in my toolkit. Currently, I am actively immersing myself in the latest version, Next.js 13, keeping pace with its enhancements and innovations. The journey of learning and adapting never ceases, and that's precisely what keeps me engaged and excited about the possibilities Next.js brings to the table. It's worth noting that even this very site you're on right now is built using Next.js. It's a testament to the trust and confidence I have in this technology. As I continue to explore and push the boundaries of what Next.js can achieve, I'm excited about the potential it holds for shaping the future of web development.",
            "ru": "За последний год мой опыт работы с Next.js был ничем иным, как захватывающим. Все началось, когда я решил интегрировать этот замечательный фреймворк в важный проект — проект LDZ. С того момента, как я погрузился в Next.js, я был очарован его универсальностью и эффективностью. Плавная интеграция серверного рендеринга, маршрутизации и фреймворка React предоставила мощный набор инструментов, который позволил мне создать исключительный пользовательский опыт для проекта LDZ. Оглядываясь на свой годовой опыт с Next.js, я с нетерпением жду возможности использовать его в будущих начинаниях. Его постоянное развитие и приверженность оставаться на передовой веб-разработки убедили меня в том, что Next.js останется ключевым элементом в моем арсенале инструментов. В настоящее время я активно изучаю последнюю версию — Next.js 13, следя за ее улучшениями и инновациями. Процесс обучения и адаптации никогда не прекращается, и именно это делает меня увлеченным и восторженным по поводу возможностей, которые предоставляет Next.js. Стоит отметить, что даже этот сайт, на котором вы сейчас находитесь, создан с использованием Next.js. Это свидетельствует о доверии и уверенности, которую я вложил в эту технологию. Продолжая исследовать и расширять границы возможностей Next.js, я взволнован потенциалом, который она несет для формирования будущего веб-разработки."
        }
    },
    {
        "id": 3,
        "name": "Javascript",
        "description": {
            "lv": "JavaScript ir programmēšanas valoda, kas ir viena no Pasaules tīmekļa pamattehnoloģijām līdzās HTML un CSS. Tai ir dinamiska tipizācija, prototipu balstīta objektu orientācija un pirmklasīgas funkcijas. Tā ir multi-paradigma valoda, kas atbalsta notikumu virzītu, funkcionālu un imperatīvu programmēšanas stilu. Tai ir lietojumprogrammu saskarnes (API), kas ļauj strādāt ar tekstu, datumiem, regulārajām izteiksmēm, standarta datu struktūrām un Dokumentu objektu modeli (DOM). JavaScript dzinēji sākotnēji tika izmantoti tikai tīmekļa pārlūkprogrammās, bet tagad tie ir kļuvuši par galvenajiem komponentiem dažos serveros un dažādās lietojumprogrammās.",
            "en": "Javscript is a programming language that is one of the core technologies of the World Wide Web, alongside HTML and CSS. It has dynamic typing, prototype-based object-orientation, and first-class functions. It is multi-paradigm, supporting event-driven, functional, and imperative programming styles. It has application programming interfaces (APIs) for working with text, dates, regular expressions, standard data structures, and the Document Object Model (DOM). JavaScript engines were originally used only in web browsers, but are now core components of some servers and a variety of applications.",
            "ru": "JavaScript — это язык программирования, который является одной из основных технологий Всемирной паутины наряду с HTML и CSS. В нём используется динамическая типизация, объектно-ориентированность на основе прототипов и функции первого класса. Это мультипарадигменный язык, поддерживающий событийно-ориентированный, функциональный и императивный стили программирования. У него есть интерфейсы прикладного программирования (API) для работы с текстом, датами, регулярными выражениями, стандартными структурами данных и объектной моделью документа (DOM). Первоначально движки JavaScript использовались только в веб-браузерах, но теперь они являются основными компонентами некоторых серверов и различных приложений."
        },
        "url": "js",
        "image": "/js.png",
        "type": "Frontend",
        "personal_experience": {
            "lv": "Es esmu strādājis ar JavaScript kopš 2018. gada, un tas ir bijis būtisks elements manā profesionālajā ceļojumā. Visās iepriekšējās darba vietās JavaScript spēlēja centrālu lomu projektos, pie kuriem es strādāju. Mana pazīstamība ar šo valodu ietver arī jaunākās ECMAScript atjauninājumus, kas nodrošina, ka esmu aktuāls ar nepārtraukti mainīgajiem tīmekļa izstrādes aspektiem. Pārsteidzoši, bet JavaScript ir īpaša vieta manā sirdī, jo tā bija mana pirmā programmēšanas valoda, kas ielika pamatus manai aizrautībai un ekspertīzei programmatūras izstrādē. ",
            "en": "I've been working with JavaScript since 2018, and it has been an integral part of my professional journey. In all of my previous workplaces, JavaScript played a central role in the projects I undertook. My familiarity with the language extends to the latest ECMAScript updates, ensuring that I stay current with the ever-evolving landscape of web development. Remarkably, JavaScript holds a special place for me as it was my first programming language, laying the foundation for my passion and expertise in software development. ",
            "ru": "Я работаю с JavaScript с 2018 года, и этот язык играл центральную роль в моем профессиональном пути. На всех предыдущих местах работы JavaScript занимал ключевое место в проектах, над которыми я работал. Моё знакомство с языком включает в себя также последние обновления ECMAScript, что позволяет мне оставаться в курсе постоянно развивающегося ландшафта веб-разработки. Примечательно, что JavaScript занимает особое место в моем сердце, так как это был мой первый язык программирования, который заложил основу моей страсти и экспертизы в разработке программного обеспечения."
        }
    },
    {
        "id": 4,
        "name": "Vue JS",
        "description": {
            "lv": "Vue.js ir atvērtā pirmkoda modelis-skatījums-skatījuma modelis (model–view–viewmodel) JavaScript ietvars lietotāja saskarnes un vienas lapas lietotņu veidošanai. Vue.js raksturo pakāpeniski pielāgojama arhitektūra, kas koncentrējas uz deklaratīvu renderēšanu un komponentu kompozīciju. Vue.js ļauj paplašināt HTML ar HTML atribūtiem, kas tiek dēvēti par direktīvām. Direktīvas nodrošina HTML lietotnēm funkcionalitāti un ir pieejamas gan kā iebūvētas, gan kā lietotāju definētas direktīvas.",
            "en": "Vue.js is an open-source model–view–viewmodel front end JavaScript framework for building user interfaces and single-page applications. Vue.js features an incrementally adaptable architecture that focuses on declarative rendering and component composition. Vue.js allows for extending HTML with HTML attributes called directives. The directives offer functionality to HTML applications, and come as either built-in or user defined directives",
            "ru": "Vue.js — это фреймворк JavaScript с открытым исходным кодом, основанный на модели «модель-представление-модель представления» (model–view–viewmodel) для создания пользовательских интерфейсов и одностраничных приложений. Vue.js характеризуется постепенно адаптируемой архитектурой, которая фокусируется на декларативном рендеринге и композиции компонентов. Vue.js позволяет расширять HTML с помощью HTML-атрибутов, называемых директивами. Директивы добавляют функциональность в HTML-приложения и могут быть встроенными или определенными пользователем."
        },
        "url": "vue",
        "image": "/vue.png",
        "type": "Frontend",
        "personal_experience": {
            "lv": "2020. un 2021. gadā es regulāri izmantoju Vue.js savos tīmekļa izstrādes projektos, uzskatot to par jaudīgu un efektīvu rīku. Tā bija galvenā sastāvdaļa manā iepriekšējā darba vietā, kur mēs izmantojām tās iespējas, lai nodrošinātu izcilas lietotāja pieredzes. Lai arī Vue.js 3. versija ieviesa vairākas uzlabojumus, jāatzīst, ka es dodu priekšroku 2. versijai, jo tās sintakse šķiet intuitīvāka. Lai gan pēdējā laikā es galvenokārt strādāju ar React, es esmu pārliecināts, ka varu ātri apgūt jaunākās Vue.js versijas, ja radīsies nepieciešamība pēc jauna darba iespējas. Vue.js joprojām ir vērtīgs assets manā prasmju kopumā, gatavs tikt izmantots, kad parādīsies piemērots projekts, kur tā stiprās puses varētu tikt izmantotas.",
            "en": "In 2020 and 2021, I regularly utilized Vue.js in my web development projects, finding it to be a powerful and efficient framework. It served as the cornerstone of my toolkit in my previous workplace, where we harnessed its capabilities to deliver exceptional user experiences. While Vue.js version 3 introduced several improvements, I must admit that I lean towards version 2 due to my personal preference for its syntax, which I find more intuitive. Although my recent experiences have primarily revolved around React, I am confident in my ability to quickly catch up with the latest updates in Vue.js if the need arises for a new job opportunity. Vue.js remains a valuable asset in my skill set, ready to be leveraged when the right project calls for its strengths.",
            "ru": "В 2020 и 2021 годах я регулярно использовал Vue.js в своих веб-разработках, находя его мощным и эффективным фреймворком. Он был основой моего инструментария на предыдущем месте работы, где мы использовали его возможности для создания исключительного пользовательского опыта. Хотя Vue.js версии 3 принес несколько улучшений, я должен признаться, что предпочитаю версию 2 из-за её более интуитивно понятного синтаксиса. Хотя в последнее время я в основном работал с React, я уверен, что смогу быстро наверстать последние обновления Vue.js, если возникнет необходимость для новой рабочей возможности. Vue.js остается ценным активом в моем наборе навыков и готов быть использованным, когда появится подходящий проект, в котором можно будет использовать его сильные стороны."
        }
    },
    {
        "id": 5,
        "name": "Scss/Sass",
        "description": {
            "lv": "Sass ir preprocesora skriptu valoda, kas tiek interpretēta vai kompilēta Cascading Style Sheets (CSS). SassScript ir pati skriptu valoda. Sass sastāv no divām sintaksēm. Oriģinālā sintakse, ko sauc par 'iegrieztā sintakse', izmanto sintaksi, kas līdzīga Haml. Tā izmanto iedobes, lai atdalītu koda blokus, un jaunas rindas simbolus, lai atdalītu noteikumus. Jaunākā sintakse, SCSS (Sassy CSS), izmanto blokveida formatējumu, līdzīgu CSS. Tā izmanto iekavas, lai norādītu koda blokos, un semikola, lai atdalītu noteikumus blokā. Iegrieztās sintakses un SCSS faili tradicionāli tiek piešķirti ar paplašinājumiem .sass un .scss attiecīgi.",
            "en": "Sass is a preprocessor scripting language that is interpreted or compiled into Cascading Style Sheets (CSS). SassScript is the scripting language itself. Sass consists of two syntaxes. The original syntax, called 'the indented syntax,' uses a syntax similar to Haml. It uses indentation to separate code blocks and newline characters to separate rules. The newer syntax, SCSS (Sassy CSS), uses block formatting like that of CSS. It uses braces to denote code blocks and semicolons to separate rules within a block. The indented syntax and SCSS files are traditionally given the extensions .sass and .scss, respectively.",
            "ru": "Sass — это язык препроцессорного скриптинга, который интерпретируется или компилируется в каскадные таблицы стилей (CSS). SassScript — это сам скриптовый язык. Sass состоит из двух синтаксисов. Оригинальный синтаксис, называемый «инденсированный синтаксис», использует синтаксис, похожий на Haml. Он использует отступы для разделения блоков кода и символы новой строки для разделения правил. Более новая синтаксис, SCSS (Sassy CSS), использует блочное форматирование, подобное CSS. Он использует фигурные скобки для обозначения блоков кода и точки с запятой для разделения правил внутри блока. Файлы инденсированного синтаксиса и SCSS традиционно имеют расширения .sass и .scss соответственно"
        },
        "url": "scss",
        "image": "/scss.webp",
        "type": "Frontend",
        "personal_experience": {
            "lv": "Kopš 2020. gada esmu izmantojis SCSS/Sass tehnoloģiju, un tas ir bijis diezgan aizraujošs ceļojums. Tas, kas sākotnēji mani pievilka, bija tās īpašības, īpaši iekļaušana un mantošana. Šīs spējas padarīja manus stilu lapas organizētākas un vieglāk uzturamas. Gan iepriekšējās, gan pašreizējās darba lomās SCSS/Sass ir bijusi vērtīga mūsu frontend izstrādes procesā. Tā ļāva rakstīt tīru, modulāru un efektīvu CSS kodu, uzlabojot sadarbību un produktivitāti komandā. Tomēr jāsaka, ka mana entuziasma par SCSS/Sass nesen ir nedaudz samazinājies. Lai gan tā joprojām ir vērtīgs rīks manā komplektā, es esmu sācis arvien vairāk pievērsties Tailwind CSS. Tailwind 'utility-first' pieejas un ātras izstrādes iespējas sāk aizraut mani, un es to arvien biežāk lietoju savos jaunākajos projektos.",
            "en": "I've been using SCSS/Sass technology since 2020, and it's been quite a journey. What initially drew me to it were its features, particularly nesting and inheritance. These capabilities made my stylesheets more organized and easier to maintain. In both my previous and current job roles, SCSS/Sass has been a valuable asset in our frontend development process. It allowed us to write clean, modular, and efficient CSS code, enhancing collaboration and productivity among the team. However, I must admit that my enthusiasm for SCSS/Sass has somewhat waned recently. While it's still a valuable tool in my toolkit, I've found myself gravitating more towards Tailwind CSS. Tailwind's utility-first approach and rapid development capabilities have started to win me over, and I've been using it more frequently in my recent projects.",
            "ru": "С тех пор как я начал использовать технологию SCSS/Sass в 2020 году, это было довольно увлекательное путешествие. То, что изначально привлекло меня, — это её возможности, особенно вложенность и наследование. Эти функции сделали мои таблицы стилей более организованными и легкими для поддержки. В обеих моих предыдущих и нынешних должностях SCSS/Sass был ценным активом в процессе фронтенд-разработки. Это позволяло писать чистый, модульный и эффективный CSS-код, улучшая сотрудничество и продуктивность в команде. Тем не менее, я должен признаться, что мой энтузиазм по отношению к SCSS/Sass в последнее время немного угас. Хотя это по-прежнему ценное средство в моём арсенале, я всё чаще склоняюсь к Tailwind CSS. Подход 'utility-first' и возможности быстрой разработки Tailwind начали меня привлекать, и я стал использовать его всё чаще в своих новых проектах."
        }
    },
    {
        "id": 6,
        "name": "PHP",
        "description": {
            "lv": "PHP ir vispārējas nozīmes skriptu valoda, kas orientēta uz tīmekļa izstrādi. PHP kodu parasti apstrādā tīmekļa serverī PHP interpretators, kas ir ieviests kā modulis, deamons vai Common Gateway Interface (CGI) izpildprogramma. Tīmekļa serverī interpretētā un izpildītā PHP koda rezultāts — kas var būt jebkāda veida dati, piemēram, ģenerēts HTML vai binārie attēlu dati — veido visu vai daļu no HTTP atbildes. Ir pieejami dažādi tīmekļa veidņu sistēmas, tīmekļa satura pārvaldības sistēmas un tīmekļa ietvari, kurus var izmantot, lai organizētu vai atvieglotu šīs atbildes ģenerēšanu.",
            "en": "PHP is a general-purpose scripting language geared towards web development. PHP code is usually processed on a web server by a PHP interpreter implemented as a module, a daemon or a Common Gateway Interface (CGI) executable. On a web server, the result of the interpreted and executed PHP code—which may be any type of data, such as generated HTML or binary image data—would form the whole or part of an HTTP response. Various web template systems, web content management systems, and web frameworks exist that can be employed to orchestrate or facilitate the generation of that response.",
            "ru": "PHP — это скриптовый язык общего назначения, ориентированный на веб-разработку. Код PHP обычно обрабатывается на веб-сервере интерпретатором PHP, который реализован как модуль, демон или исполняемый файл Common Gateway Interface (CGI). На веб-сервере результат интерпретированного и выполненного кода PHP — который может быть любым типом данных, таким как сгенерированный HTML или бинарные данные изображения — формирует целиком или частично HTTP-ответ. Существуют различные системы шаблонов веб-страниц, системы управления веб-контентом и веб-фреймворки, которые можно использовать для организации или облегчения генерации этого ответа."
        },
        "url": "php",
        "image": "/php.png",
        "type": "Backend",
        "personal_experience": {
            "lv": "Mana ceļojums ar PHP sākās 2019. gadā, un tas ir bijis ārkārtīgi apmierinošs piedzīvojums. Viens no nozīmīgākajiem ieguvumiem, ko esmu guvis, izmantojot PHP, ir dziļa izpratne par objektorientētas programmēšanas (OOP) principiem. PHP ļāva man efektīvi piemērot šos principus tīmekļa izstrādē, kas noveda pie tīrākas un vieglāk uzturamas koda struktūras. PHP sintakse man vienmēr ir bijusi pievilcīga. Tās lasāmība un elastība padara to par lielisku izvēli tīmekļa izstrādes uzdevumiem. Turklāt PHP plašā un aktīvā kopiena ir bijusi nenovērtējama. Bagātība ar tiešsaistes resursiem, pamācībām un atvērtā koda projektiem ir sniegusi nepārtrauktu atbalstu un mācīšanās iespējas. Visa mana karjeras laikā PHP ir bijis pastāvīgs pavadonis. Es to esmu plaši izmantojis visās savās darba lomās, gan kā atsevišķu valodu, gan kopā ar populārām ietvarstruktūrām, piemēram, Laravel, Zend un Drupal. Šie ietvari ir vienkāršojuši izstrādes procesus, ļaujot man efektīvi izveidot izturīgas un funkcionalitātē bagātas tīmekļa lietotnes. PHP daudzpusība un saderība ar šiem ietvariem ir padarījusi to par neaizstājamu daļu no manas profesionālās ceļojuma.",
            "en": "My journey with PHP began in 2019, and it has been an incredibly rewarding experience. One of the most significant advantages I've gained from using PHP is a deep understanding of object-oriented programming (OOP) principles. PHP allowed me to apply these principles effectively in web development, leading to cleaner and more maintainable code structures. PHP's syntax has always resonated with me. Its readability and flexibility make it an excellent choice for web development tasks. Additionally, the vast and active community that surrounds PHP has been invaluable. The wealth of online resources, tutorials, and open-source projects have provided continuous support and learning opportunities. Throughout my career, PHP has been a constant presence. I've used it extensively in all my job roles, both as a standalone language and in conjunction with popular frameworks like Laravel, Zend, and Drupal. These frameworks have streamlined development processes, allowing me to create robust and feature-rich web applications efficiently. PHP's versatility and compatibility with these frameworks have made it an integral part of my professional journey.",
            "ru": "Мой путь с PHP начался в 2019 году, и это был невероятно полезный опыт. Одно из самых значительных преимуществ, которые я получил, используя PHP, — это глубокое понимание принципов объектно-ориентированного программирования (ООП). PHP позволил мне эффективно применять эти принципы в веб-разработке, что привело к более чистым и поддерживаемым структурам кода. Синтаксис PHP всегда был мне понятен. Его читаемость и гибкость делают его отличным выбором для задач веб-разработки. Кроме того, обширное и активное сообщество вокруг PHP было бесценным. Огромное количество онлайн-ресурсов, учебных пособий и проектов с открытым исходным кодом обеспечивали постоянную поддержку и возможности для обучения. На протяжении всей моей карьеры PHP был постоянным спутником. Я активно использовал его во всех своих ролях, как самостоятельно, так и в сочетании с популярными фреймворками, такими как Laravel, Zend и Drupal. Эти фреймворки упростили процессы разработки, позволив мне эффективно создавать надежные и насыщенные функциями веб-приложения. Многообразие и совместимость PHP с этими фреймворками сделали его неотъемлемой частью моего профессионального пути."
        }
    },
    {
        "id": 7,
        "name": "Laravel",
        "description": {
            "lv": "Laravel ir bezmaksas un atvērtā koda PHP tīmekļa ietvars. Tas ir paredzēts tīmekļa lietotņu izstrādei, ievērojot modela–skata–kontroliera (MVC) arhitektūras modeli un balstoties uz Symfony. Dažas no Laravel funkcijām ir modulārs iepakojumu sistēma ar īpašu atkarību pārvaldnieku, dažādi veidi, kā piekļūt relāciju datubāzēm, rīki, kas palīdz lietotņu izvietošanā un uzturēšanā, un tā orientācija uz sintaktisko cukuru.",
            "en": "Laravel is a free and open-source PHP web framework. It is intended for the development of web applications following the model–view–controller (MVC) architectural pattern and based on Symfony. Some of the features of Laravel are a modular packaging system with a dedicated dependency manager, different ways for accessing relational databases, utilities that aid in application deployment and maintenance, and its orientation toward syntactic sugar.",
            "ru": "Laravel — это бесплатный и открытый PHP фреймворк для веб-разработки. Он предназначен для создания веб-приложений по модели модель–представление–контроллер (MVC) и основан на Symfony. Некоторые из особенностей Laravel включают модульную систему упаковки с отдельным менеджером зависимостей, различные способы доступа к реляционным базам данных, утилиты для развертывания и обслуживания приложений, а также ориентированность на синтаксический сахар."
        },
        "url": "laravel",
        "image": "/laravel.jpg",
        "type": "Backend",
        "personal_experience": {
            "lv": "Esmu iegrimusi Laravel pasaulē kopš 2020. gada, un šī ceļojuma laikā man ir bijusi lieliska pieredze. Tas, kas mani sākotnēji piesaistīja šim PHP ietvaram, bija tā eleganta sintakse un iespaidīgu funkciju klāsts. Laravel ievēro Model-View-Controller (MVC) arhitektūru, kas atvieglo koda organizāciju, padarot to pārvaldāmāku un uzturējamāku. Viens no izcilākajiem Laravel raksturlielumiem ir tā labi pārdomātās vaicājumu struktūras, kas padara datubāzu mijiedarbību vienkāršu un ērtu. Ietvara vienkāršība un vieglums lietošanā ir ietaupījusi man neskaitāmas stundas attīstībā. Mana aizrautība ar Laravel ir redzama vairākos projektos, kurus esmu īstenojis. Dažus no tiem var atrast manā GitHub lapā, kurā ir redzama šī ietvara daudzveidība un jauda. Turklāt mana pašreizējā darba vieta lielā mērā paļaujas uz Laravel mūsu tīmekļa izstrādes projektos, kas vēl vairāk nostiprina tā nozīmi manā profesionālajā rīku komplektā. Laravel turpina būt mans galvenais izvēles rīks, lai veidotu robustas un skalojamas tīmekļa lietojumprogrammas",
            "en": "I've been immersed in the world of Laravel since 2020, and it's been an exciting journey. What initially drew me to this PHP framework was its elegant syntax and an array of impressive features. Laravel's adherence to the Model-View-Controller (MVC) architecture simplifies the organization of code, making it more manageable and maintainable. One of the standout qualities of Laravel is its well-thought-out query structures, which make database interactions a breeze. The framework's simplicity and ease of use have saved me countless hours during development. My enthusiasm for Laravel is evident in the numerous projects I've undertaken. You can find several of them on my GitHub, showcasing the versatility and power of this framework. Additionally, my current workplace relies heavily on Laravel for our web development projects, further solidifying its importance in my professional toolkit. Laravel continues to be a go-to choice for building robust and scalable web applications.",
            "ru": "Я погружён в мир Laravel с 2020 года, и это было захватывающее путешествие. То, что изначально привлекло меня к этому PHP-фреймворку, — это его элегантный синтаксис и впечатляющий набор функций. Соблюдение Laravel архитектуры Model-View-Controller (MVC) упрощает организацию кода, делая его более управляемым и поддерживаемым. Одним из выдающихся качеств Laravel являются хорошо продуманные структуры запросов, которые упрощают взаимодействие с базой данных. Простота и удобство использования фреймворка сэкономили мне множество часов разработки. Мой энтузиазм к Laravel очевиден в многочисленных проектах, которые я реализовал. Вы можете найти несколько из них на моём GitHub, где демонстрируется универсальность и мощь этого фреймворка. Кроме того, моя текущая работа сильно зависит от Laravel для наших веб-разработок, что ещё больше укрепляет его важность в моем профессиональном инструментарии. Laravel продолжает быть моим основным выбором для создания надёжных и масштабируемых веб-приложений."
        }
    },
    {
        "id": 8,
        "name": "Drupal",
        "description": {
            "lv": "Drupal ir bezmaksas un atvērtā koda tīmekļa satura pārvaldības sistēma (CMS), kas rakstīta PHP valodā. Drupal nodrošina atvērtā koda aizmugures sistēmu vismaz 14% no 10 000 populārākajām tīmekļa vietnēm visā pasaulē un 1,2% no 10 miljoniem populārāko tīmekļa vietņu— sākot no personīgajiem emuāriem līdz korporatīvajām, politiskajām un valdības vietnēm. Sistēmas arī izmanto Drupal zināšanu pārvaldībai un biznesa sadarbībai. Drupal arī raksturo sevi kā tīmekļa lietojumprogrammu ietvaru. Salīdzinot ar ievērojamiem ietvariem, Drupal izpilda lielāko daļu parasti pieņemto funkcionalitātes prasību attiecībā uz tādiem tīmekļa ietvariem. Drupal darbojas uz jebkuras skaitļošanas platformas, kas atbalsta gan tīmekļa serveri, kas spēj izpildīt PHP, gan datu bāzi satura un konfigurācijas glabāšanai.",
            "en": "Drupal is a free and open-source web content management system (CMS) written in PHP. Drupal provides an open-source back-end framework for at least 14% of the top 10,000 websites worldwide and 1.2% of the top 10 million websites—ranging from personal blogs to corporate, political, and government sites. Systems also use Drupal for knowledge management and for business collaboration. Drupal also describes itself as a Web application framework. When compared with notable frameworks, Drupal meets most of the generally accepted feature requirements for such web frameworks. Drupal runs on any computing platform that supports both a web server capable of running PHP and a database to store content and configuration.",
            "ru": "Drupal — это бесплатная и открытая система управления веб-контентом (CMS), написанная на PHP. Drupal предоставляет открытый бэкэнд-фреймворк для как минимум 14% из 10 000 популярнейших сайтов в мире и 1,2% из 10 миллионов лучших сайтов — от личных блогов до корпоративных, политических и правительственных сайтов. Также системы используют Drupal для управления знаниями и бизнес-сотрудничества. Drupal также описывает себя как веб-приложенческий фреймворк. По сравнению с известными фреймворками, Drupal соответствует большинству общепринятых функциональных требований для таких веб-фреймворков. Drupal работает на любой вычислительной платформе, поддерживающей как веб-сервер, способный выполнять PHP, так и базу данных для хранения контента и конфигурации."
        },
        "url": "drupal",
        "image": "/drupal.png",
        "type": "Backend",
        "personal_experience": {
            "lv": "Es sāku izpētīt Drupal 2021. gadā, galvenokārt tāpēc, ka tas bija prasība manā pašreizējā darbā. Tomēr mana pieredze ar šo satura pārvaldības sistēmu ir bijusi ļoti patīkama. Viens no galvenajiem iemesliem, kāpēc esmu iecienījis Drupal, ir tās spēja panākt līdzsvaru starp uzdevumu vienkāršošanu un plašām pielāgošanas iespējām, izmantojot pielāgotu kodu. Drupal 'out of the box' iespējas padara to ļoti lietotājam draudzīgu, vienkāršojot tādus uzdevumus kā satura pārvaldība un tīmekļa vietnes administrēšana. Tomēr tas neapstājas pie tā; tas arī dod izstrādātājiem, piemēram, man, iespēju dziļāk izpētīt un modificēt esošo loģiku, lai apmierinātu konkrētas projekta prasības. Viens no aizraujošākajiem notikumiem manā Drupal pieredzē ir bijusi pāreja uz tā izmantošanu kā Headless CMS. Šī pāreja ir atvēruši jaunas iespējas un uzlabojusi Drupal elastību kā satura pārvaldības risinājums. Kopumā mana pieredze ar Drupal ir bijusi atlīdzinoša, piedāvājot gan lietošanas ērtumu, gan dziļas pielāgošanas iespējas.",
            "en": "I delved into Drupal in 2021, primarily because it was a requirement for my current job. However, my journey with this content management system has been quite pleasant. One of the key reasons I've grown to appreciate Drupal is its ability to strike a balance between simplifying tasks and offering extensive customization options through custom code. Drupal's out-of-the-box capabilities make it incredibly user-friendly, streamlining tasks like content management and website administration. Yet, it doesn't stop there; it also empowers developers like me to dig deeper and modify existing logic to meet specific project requirements. One exciting development in my Drupal experience has been our shift towards using it as a Headless CMS. This transition has opened up new possibilities and enhanced the flexibility of Drupal as a content management solution. Overall, my journey with Drupal has been a rewarding one, offering both ease of use and the potential for deep customization.",
            "ru": "Я начал работать с Drupal в 2021 году, в первую очередь потому, что это было требование моей текущей работы. Однако мое путешествие с этой системой управления контентом оказалось довольно приятным. Одна из основных причин, по которой я начал ценить Drupal, — это его способность находить баланс между упрощением задач и предоставлением обширных возможностей для настройки через пользовательский код. Встроенные возможности Drupal делают его невероятно удобным в использовании, упрощая такие задачи, как управление контентом и администрирование сайта. Но на этом он не останавливается; он также дает разработчикам возможность углубляться и модифицировать существующую логику, чтобы соответствовать конкретным требованиям проекта. Одним из захватывающих аспектов моего опыта с Drupal стало наше переключение на использование его в качестве Headless CMS. Этот переход открыл новые возможности и увеличил гибкость Drupal как решения для управления контентом. В целом, мое путешествие с Drupal оказалось полезным, предлагая как простоту использования, так и потенциал для глубокой настройки."
        }
    },
    {
        "id": 9,
        "name": "Redux",
        "description": {
            "lv": "Redux ir atvērtā koda JavaScript bibliotēka, kas tiek izmantota lietojumprogrammu stāvokļa pārvaldīšanai un centralizēšanai. Tā visbiežāk tiek lietota kopā ar tādām bibliotēkām kā React vai Angular, lai veidotu lietotāja saskarnes. Redux ir līdzīgs (un iedvesmots no) Facebook Flux arhitektūras. Tā ir neliela bibliotēka ar vienkāršu, ierobežotu API, kas ir paredzēta, lai būtu paredzama konteineru lietojumprogrammu stāvokļa pārvaldībai. Tā darbojas līdzīgi kā reducējoša funkcija, kas ir funkcionālās programmēšanas koncepts.",
            "en": "Redux is an open-source JavaScript library for managing and centralizing application state. It is most commonly used with libraries such as React or Angular for building user interfaces. Similar to (and inspired by) Facebook's Flux architecture. Redux is a small library with a simple, limited API designed to be a predictable container for application state. It operates in a similar fashion to a reducing function, a functional programming concept.",
            "ru": "Redux — это открытая библиотека JavaScript для управления и централизованного хранения состояния приложения. Чаще всего её используют вместе с библиотеками, такими как React или Angular, для создания пользовательских интерфейсов. Redux похож на (и вдохновлён) архитектурой Flux от Facebook. Это небольшая библиотека с простым, ограниченным API, предназначенная для предсказуемого управления состоянием приложения. Она работает подобно функции редуктора, концепции функционального программирования."
        },
        "url": "redux",
        "image": "/redux.png",
        "type": "Frontend",
        "personal_experience": {
            "lv": "Redux spēlēja nozīmīgu lomu manā izstrādes ceļojumā 2020. un 2021. gadā. Tā bija rīks, ko es regulāri izmantoju un pat pamatīgi izpētīju sava bakalaura darba ietvaros. Tajā laikā Redux bieži tika slavēts par savu paredzamo stāvokļa pārvaldību un integrāciju ar React, padarot to par populāru izvēli frontend izstrādes ainavā. Tomēr mana attiecība ar Redux sāka mainīties laika gaitā. Lai gan tas piedāvā strukturētu pieeju stāvokļa pārvaldībai, es pakāpeniski sāku zaudēt interesi par FLUX arhitektūru un globālā storu koncepciju. Sāku izpētīt alternatīvas stāvokļa pārvaldības risinājumu iespējas, kas labāk atbilstu manām mainīgajām vēlmēm. Tā rezultātā mans Redux lietojums samazinājās, un es sāku izpētīt citus stāvokļa pārvaldības pieejas, kas labāk atbilstu maniem projektiem un izstrādes stilam. Lai gan Redux ir savas priekšrocības, mana programmēšanas ceļojuma gaitā es esmu devies citos virzienos, meklējot piemērotākus risinājumus savām frontend vajadzībām.",
            "en": "Redux played a prominent role in my development journey during 2020 and 2021. It was a tool I regularly used and even delved into extensively for my graduate work. At that time, Redux was often praised for its predictable state management and integration with React, making it a popular choice in the frontend development landscape. However, my relationship with Redux began to change over time. While it offers a structured approach to state management, I gradually found myself growing less fond of the FLUX architecture and the concept of a global store. I started exploring alternative state management solutions that better aligned with my evolving preferences. As a result, my usage of Redux diminished, and I began to explore different state management approaches that better suited my projects and development style. While Redux has its merits, my journey in programming has led me down different paths in pursuit of more fitting solutions for my frontend needs.",
            "ru": "Redux сыграл важную роль в моем пути разработки в 2020 и 2021 годах. Это был инструмент, который я регулярно использовал и даже глубоко изучал для своей дипломной работы. В то время Redux часто хвалили за предсказуемое управление состоянием и интеграцию с React, что делало его популярным выбором в фронтенд-разработке. Однако с течением времени моя привязанность к Redux начала меняться. Хотя он предлагает структурированный подход к управлению состоянием, я постепенно стал менее заинтересован в архитектуре FLUX и концепции глобального хранилища. Я начал исследовать альтернативные решения для управления состоянием, которые лучше соответствовали моим развивающимся предпочтениям. В результате использование Redux уменьшилось, и я стал искать другие подходы к управлению состоянием, которые лучше соответствовали бы моим проектам и стилю разработки. Хотя Redux имеет свои достоинства, мой путь в программировании привел меня к другим направлениям в поисках более подходящих решений для моих фронтенд-потребностей."
        }
    },
    {
        "id": 10,
        "name": "Tailwind",
        "description": {
            "lv": "Tailwind ir atvērtā koda CSS ietvars. Šī bibliotēkas galvenā iezīme ir tā, ka, atšķirībā no citiem CSS ietvariem, piemēram, Bootstrap, tā nesniedz iepriekš definētus klasifikācijas elementiem, piemēram, pogām vai tabulām. Tā vietā tā izveido sarakstu ar 'utility' CSS klasēm, kuras var izmantot, lai stilizētu katru elementu, kombinējot un sajaucot tās.",
            "en": "Tailwind is an open source CSS framework. The main feature of this library is that, unlike other CSS frameworks like Bootstrap, it does not provide a series of predefined classes for elements such as buttons or tables. Instead, it creates a list of 'utility' CSS classes that can be used to style each element by mixing and matching.",
            "ru": "Tailwind — это открытый CSS-фреймворк. Основная особенность этой библиотеки заключается в том, что, в отличие от других CSS-фреймворков, таких как Bootstrap, она не предоставляет набор заранее определённых классов для элементов, таких как кнопки или таблицы. Вместо этого она создаёт список утилитарных CSS-классов, которые можно использовать для стилизации каждого элемента, комбинируя и сочетая их.."
        },
        "url": "tailwind",
        "image": "/tailwind.png",
        "type": "Frontend",
        "personal_experience": {
            "lv": "Es sāku savu ceļu ar Tailwind CSS apmēram pirms gada, un tas ir kļuvis par manu iecienītāko stila risinājumu. Tas, kas mani sākotnēji piesaistīja pie Tailwind, bija tā vienkāršība un revolūcionārais priekšstats, ka man vairs nav jāuztraucas par pielāgotu klases nosaukumu rakstīšanu. Tailwind CSS utilitāšu pirmais pieejas un visaptverošais iepriekš definēto klašu komplekts padara stila pievienošanu vienkāršu. Tas vienkāršo izstrādes procesu, nodrošinot vienkāršu un konsekventu veidu, kā piemērot stilus elementiem. Šī pieeja būtiski paātrina frontend darba plūsmu, ļaujot man vairāk koncentrēties uz funkcionalitāti un mazāk uz stilu smalkumiem. Kopumā Tailwind CSS ir pārveidojis manu pieeju stilizēšanai tīmekļa izstrādē. Tā vienkāršība un utilitāšu pirmais filozofija ir padarījusi to par neaizvietojamu rīku manā komplektā, vienkāršojot stila procesu un palielinot manu produktivitāti.",
            "en": "I embarked on my Tailwind CSS journey approximately a year ago, and it has since become my favorite styling solution. What initially captivated me about Tailwind was its simplicity and the revolutionary idea that I no longer needed to agonize over writing custom class names. Tailwind CSS's utility-first approach and comprehensive set of pre-defined classes make styling a breeze. It simplifies the development process by providing a straightforward and consistent way to apply styles to elements. This approach significantly speeds up the frontend workflow, allowing me to focus more on functionality and less on the intricacies of styling. In summary, Tailwind CSS has transformed the way I approach styling in web development. Its simplicity and utility-first philosophy have made it an indispensable tool in my toolkit, streamlining the styling process and boosting my productivity.",
            "ru": "Я начал свой путь с Tailwind CSS примерно год назад, и с тех пор он стал моим любимым решением для стилизации. То, что изначально привлекло меня в Tailwind, была его простота и революционная идея о том, что больше не нужно мучиться с написанием пользовательских имен классов. Подход Tailwind CSS, основанный на утилитарных классах и обширный набор предопределённых классов, упрощает стилизацию. Он упрощает процесс разработки, предоставляя простой и последовательный способ применения стилей к элементам. Этот подход значительно ускоряет рабочий процесс написания  фронтенда, позволяя мне сосредоточиться больше на функциональности и меньше на тонкостях стилизации. В общем, Tailwind CSS изменил мой подход к стилизации в веб-разработке. Его простота и философия утилитарных классов сделали его незаменимым инструментом в моем арсенале, упростив процесс стилизации и повысив мою продуктивность."
        }
    },
    {
        "id": 11,
        "name": "Typescript",
        "description": {
            "lv": "TypeScript ir programmēšanas valoda, kas pievieno statisko tipu sistēmu ar opcionalām tipu anotācijām JavaScript valodai. Tā ir paredzēta lielu lietojumprogrammu izstrādei un pārtop JavaScript valodā. Tā kā TypeScript ir JavaScript paplašinājums, visi JavaScript programmas ir sintaktiski derīgas TypeScript, bet tās var neizturēt tipu pārbaudi drošības iemeslu dēļ.",
            "en": "TypeScript is a programming language, that adds static typing with optional type annotations to JavaScript. It is designed for the development of large applications and transpiles to JavaScript. Because TypeScript is a superset of JavaScript, all JavaScript programs are syntactically valid TypeScript, but they can fail to type-check for safety reasons.",
            "ru": "TypeScript — это язык программирования, который добавляет статическую типизацию с необязательными аннотациями типов к JavaScript. Он предназначен для разработки крупных приложений и транспилируется в JavaScript. Поскольку TypeScript является надмножеством JavaScript, все программы на JavaScript синтаксически действительны в TypeScript, но они могут не проходить проверку типов по соображениям безопасности."
        },
        "url": "typescript",
        "image": "/ts.png",
        "type": "Frontend",
        "personal_experience": {
            "lv": "Manas pastāvīgās TypeScript lietošanas kopš 2022. gada ir būtiski mainījusi veidu, kā es pieeju JavaScript izstrādei. Viens no pievilcīgākajiem TypeScript aspektiem ir tā sintakse, kuru uzskatu par tīru, izsmeļošu un viegli saprotamu. Tomēr tas, kas patiesi izceļ TypeScript, ir tā spēcīgā tipu sistēma, kas pievieno drošības un paredzamības slāni manam kodam. Tipizācija, ko nodrošina TypeScript, ir būtiski uzlabojusi koda kvalitāti un uzturējamību. Tā palīdz identificēt kļūdas kompilācijas laikā, samazinot izpildes kļūdas un uzlabojot manas lietotnes kopējo stabilitāti. Lai arī TypeScript piedāvā daudz priekšrocību, jāatzīst, ka integrācija ar trešo pušu bibliotēkām dažkārt var būt izaicinoša. Turklāt reizēm brīdinājuma ziņojumi var būt nedaudz kaitinoši. Tomēr šie nelielie neērtības nav samazinājuši manu entuziasmu par TypeScript. Es joprojām esmu gatavs izmantot tā spēku nākamajos projektos, jo tā priekšrocības pārsniedz šos nelielos jautājumus. TypeScript joprojām ir vērtīgs instruments manā izstrādātāju rīkā, un es ar nepacietību gaidu iespēju tā potenciālu izpētīt vēl vairāk.",
            "en": "My consistent use of TypeScript since 2022 has fundamentally transformed the way I approach JavaScript development. One of the most appealing aspects of TypeScript is its syntax, which I find to be clean, expressive, and easy to understand. However, what truly sets TypeScript apart is its robust type system, which adds a layer of safety and predictability to my code. The typization that TypeScript provides has been a game-changer in terms of code quality and maintainability. It has helped catch errors at compile time, reducing runtime bugs and enhancing the overall stability of my applications. While TypeScript has numerous benefits, I must admit that integrating it with third-party libraries can sometimes be challenging. Additionally, occasional warning messages can be a bit vexing. However, these minor inconveniences have not dampened my enthusiasm for TypeScript. I remain eager to leverage its power in future projects, as its advantages far outweigh these minor issues. TypeScript continues to be a valuable asset in my development toolkit, and I look forward to exploring its potential further.",
            "ru": "Моё постоянное использование TypeScript с 2022 года кардинально изменило мой подход к разработке на JavaScript. Один из самых привлекательных аспектов TypeScript — это его синтаксис, который я считаю чистым, выразительным и легко понятным. Однако то, что действительно выделяет TypeScript, — это его мощная система типов, которая добавляет уровень безопасности и предсказуемости в мой код. Типизация, которую предоставляет TypeScript, оказала значительное влияние на качество кода и его поддерживаемость. Она помогает находить ошибки на этапе компиляции, снижая количество ошибок во время выполнения и повышая общую стабильность моих приложений. Хотя у TypeScript много преимуществ, должен признать, что интеграция с библиотеками сторонних разработчиков иногда может быть сложной. Кроме того, иногда предупреждающие сообщения могут быть несколько раздражающими. Тем не менее, эти небольшие неудобства не ослабили моего энтузиазма по отношению к TypeScript. Я по-прежнему стремлюсь использовать его возможности в будущих проектах, так как его преимущества значительно перевешивают эти незначительные проблемы. TypeScript продолжает быть ценным инструментом в моем наборе разработчика, и я с нетерпением жду возможности дальше исследовать его потенциал.."
        }
    }
]